#!/usr/bin/env python
import argparse
from pathlib import Path

from HD_BET.run import run_hd_bet
from radifox.naming import ImageFile
from radifox.records import ProcessingModule


class HDBET(ProcessingModule):
    name = "hdbet"
    version = "1.0.0"

    @staticmethod
    def cli(args=None):
        parser = argparse.ArgumentParser()
        parser.add_argument("-i", "--image", type=Path, required=True)
        parsed = parser.parse_args(args)

        parsed.image = parsed.image.resolve()
        if not parsed.image.exists():
            parser.error(f"Input image path ({parsed.image}) does not exist.")

        img_suffix = "_n4" if ImageFile(parsed.image).acqdim == "3D" else "_n4_espreso-smore"
        if parsed.image.name.split(".")[0].split("_")[-1] != img_suffix:
            steps = "bias-correction" + ("" if img_suffix == "_n4" else " and espreso-smore")
            parser.error(
                f"Input image ({parsed.image}) has not gone through the proper processing steps.\n"
                f"Have you run the {steps} step{'' if img_suffix == '_n4' else 's'}?"
            )

        return {"image": parsed.image}

    @staticmethod
    def run(image: Path):
        tmp_dir = image.parent.parent / "tmp" / "hd-bet"
        tmp_dir.mkdir(exist_ok=True, parents=True)
        output_dir = image.parent.parent / "proc"
        output_dir.mkdir(exist_ok=True, parents=True)
        stem = image.name.split(".")[0]

        run_hd_bet(
            str(image),
            str(tmp_dir / f"{stem}_brain.nii.gz"),
            postprocess=True,
            keep_mask=True,
            bet=True,
        )
        (tmp_dir / f"{stem}_brain_mask.nii.gz").rename(output_dir / f"{stem}_hdbet.nii.gz")

        return {
            "brainmask": (
                output_dir / f"{stem}_hdbet.nii.gz",
                image,
            )
        }


if __name__ == "__main__":
    HDBET()
